---
swagger: '2.0'
info:
  version: 0.1.0
  title: "Where's Charlie?"
paths:
  /locations:
    get:
      tags:
        - locations
      summary: List location updates.
      description: If unauthenticated, get a list of publicly-viewable location updates. If authenticated with the `user:profile` scope, setting the parameter `show_hidden` to true will also return location updates marked as inactive that belong to that user. If authenticated with the `admin` scope, *all* location updates are returned, regardless of their active/inactive statuses.
      operationId: wheres_charlie.controllers.location_controllers.locations_get
      parameters:
        - name: per_page
          in: query
          description: The maximum number of entries returned. Default `10` max `200`.
          type: integer
          minimum: 1
          maximum: 200
          default: 10
        - name: page
          in: query
          description: The page to return. Default `1`, minimum `1`.
          type: integer
          minimum: 1
          default: 1
        - name: reverse_chronological
          in: query
          description: Return the results in reverse chronological order (newest first) if `true`. In chronological order if `false`. Default `true`.
          type: boolean
          default: true
        - name: show_hidden
          in: query
          description: Whether to show hidden location updates. Only available to authenticated users. Default `false`.
          type: boolean
          default: false
      responses:
        '200':
          description: The locations were retreived.
          schema:
            $ref: '#/definitions/ArrayOfLocations'
        '401':
          description: An unauthenticated request or a request made without a required scope (`admin` or `user:profile`) was made with `show_hidden` set to true.
        '404':
          description: No locations were found matching this query. Likely you have picked too high of a page number
    post:
      tags:
        - locations
      operationId: wheres_charlie.controllers.location_controllers.locations_post
      summary: Post a location update.
      description: Must be authenticated with either the `admin` or `user:post` scope. Requests made with the `admin` scope allow impersonation. Requests made with `user:post` scope will post the location update as the authenticated user.
      parameters:
        - name: body
          in: body
          description: The `Location` object to be created.
          required: true
          schema:
            $ref: '#/definitions/Location'
      security:
        - wheres_charlie_key: []
      responses:
        '201':
          description: The location update was created.
          schema:
            $ref: '#/definitions/Location'
        '401':
          description: An unauthenticated request, a request made without a required scope (`admin` or `user:post`) was made, or a request lacking the `admin` scope was made with `user` set to a value other than that of the authenticated user.
  '/locations/{id}':
    get:
      tags:
        - locations
      summary: Get a location update.
      description: If unauthenticated, the location with `id` is reteived if it exists and is active. If authenticated with the `user:profile` scope, inactive location updates belonging to the authenticated user can also be retreived. If authenticated with the `admin` scope, any existing location update with be retreived.
      operationId: wheres_charlie.controllers.location_controllers.locations_id_get
      parameters:
        - name: id
          in: path
          description: The `id` of the location update to retreive.
          required: true
          type: string
          format: byte
      responses:
        '200':
          description: The location update was retreived.
          schema:
            $ref: '#/definitions/Location'
        '404':
          description: The requested location update does not exist.
    delete:
      tags:
        - locations
      summary: Delete a location update.
      description: If authenticated with the `user:post` scope, making this request will delete the location update with the given `id` if it belongs to the authenticated user. If authenticated with the `admin` scope, this request will delete the location update if it exists.
      operationId: wheres_charlie.controllers.location_controllers.locations_id_delete
      parameters:
        - name: id
          in: path
          description: The `id` of the location update to delete.
          required: true
          type: string
          format: byte
      security:
        - wheres_charlie_key: []
      responses:
        '204':
          description: The location update was deleted.
        '401':
          description: An unauthenticated reuqest was made or a request made without the required scope (`admin` or `user:post`) and correct user was made.
        '404':
          description: The requested location update does not exist.
    patch:
      tags:
        - locations
      summary: Update a location update.
      description: Update a location update with the provided object. Must be authenticated with the `admin` scope, allowing the updating of all the fields of any location, or the `user:post` scope, allowing the updating of all fields except `user` for all locations belonging to the authenticated user.
      operationId: wheres_charlie.controllers.location_controllers.locations_id_patch
      parameters:
        - name: id
          in: path
          description: The `id` of the location update to be patched.
          required: true
          type: string
          format: byte
        - name: body
          in: body
          description: The partially-filled `Location` object used to patch.
          required: true
          schema:
            $ref: '#/definitions/Location'
      security:
        - wheres_charlie_key: []
      responses:
        '200':
          description: The location update was patched.
          schema:
            $ref: '#/definitions/Location'
  /token:
    post:
      tags:
        - users
      summary: Acquire an authentication token.
      description: Acquire an authentication token for the given user and scopes. For access to authenticated endpoints pass the token in the `Authorization` header prefixed by the string `JWT` and a space, i.e. `JWT token-information-here`.
      operationId: wheres_charlie.controllers.token_controllers.token_post
      parameters:
        - name: body
          in: body
          description: The authentication details.
          required: true
          schema:
            type: object
            required:
              - username
              - password
              - scopes
            properties:
              username:
                type: string
              password:
                type: string
              scopes:
                type: array
                items:
                  type: string
                  enum:
                    - admin
                    - 'user:post'
                    - 'user:profile'
      responses:
        '200':
          description: The authentication succeded.
          schema:
            $ref: '#/definitions/AccessToken'
        '401':
          description: Invalid authentication details were provided.

  /users:
    get:
      tags:
        - users
      summary: List users.
      operationId: wheres_charlie.controllers.user_controllers.users_get
      parameters:
        - name: per_page
          in: query
          description: The maximum number of entries returned. Default `10` max `200`.
          type: integer
          minimum: 1
          maximum: 200
          default: 10
        - name: page
          in: query
          description: The page to return. Default `0`.
          type: integer
          minimum: 1
          default: 1
        - name: show_hidden
          in: query
          description: Whether to show hidden users. Only available to administrators. Default `false`; `true` is ignored if issued by a non-administrator.
          type: boolean
          default: false
      responses:
        '200':
          description: The users were retreived.
          schema:
            $ref: '#/definitions/ArrayOfUsers'
    post:
      tags:
        - users
      summary: Create a user.
      operationId: wheres_charlie.controllers.user_controllers.users_post
      parameters:
        - name: body
          in: body
          description: The `User` object to be created.
          required: true
          schema:
            $ref: '#/definitions/User'
      security:
        - wheres_charlie_key: []
      responses:
        '201':
          description: The user was created.
          schema:
            $ref: '#/definitions/User'
  '/users/{id}':
    get:
      tags:
        - users
      summary: Get a user.
      operationId: wheres_charlie.controllers.user_controllers.users_id_get
      parameters:
        - name: id
          in: path
          description: The `id` of the user to retreive.
          required: true
          type: string
          format: byte
      responses:
        '200':
          description: The user was retreived.
          schema:
            $ref: '#/definitions/User'
    delete:
      tags:
        - users
      summary: Delete a user.
      operationId: wheres_charlie.controllers.user_controllers.users_id_delete
      parameters:
        - name: id
          in: path
          description: The `id` of the user to delete.
          required: true
          type: string
          format: byte
      security:
        - wheres_charlie_key: []
      responses:
        '204':
          description: The user was deleted.
    patch:
      tags:
        - users
      summary: Update a user. `name` and `hidden` can be updated by that user or an admin; `admin` can be updated by an admin.
      operationId: wheres_charlie.controllers.user_controllers.users_id_patch
      parameters:
        - name: id
          in: path
          description: The `id` of the user to update.
          required: true
          type: string
          format: byte
        - name: body
          in: body
          description: The partially-filled `User` object used to patch.
          required: true
          schema:
            $ref: '#/definitions/User'
      security:
        - wheres_charlie_key: []
      responses:
        '200':
          description: The user was patched.
          schema:
            $ref: '#/definitions/User'
  '/users/{id}/locations':
    get:
      tags:
        - users
      summary: "List a user's location updates."
      operationId: wheres_charlie.controllers.user_controllers.users_id_locations_get
      parameters:
        - name: id
          in: path
          description: The `id` of the user whose location updates are to be retreived.
          required: true
          type: string
          format: byte
        - name: per_page
          in: query
          description: The maximum number of entries returned. Default `10` max `200`.
          type: integer
          minimum: 1
          maximum: 200
          default: 10
        - name: page
          in: query
          description: The page to return. Default `1`.
          type: integer
          default: 1
        - name: reverse_chronological
          in: query
          description: Return the results in reverse chronological order (newest first) if `true`. In chronological order if `false`. Default `true`.
          type: boolean
          default: true
        - name: show_hidden
          in: query
          description: Whether to show hidden location updates. Only available to administrators.
          type: boolean
          default: false
      responses:
        '200':
          description: The locations were retreived.
          schema:
            $ref: '#/definitions/ArrayOfLocations'
  '/users/{id}/locations/latest':
    get:
      tags:
        - users
      summary: "Retreive a user's most recent location update."
      operationId: wheres_charlie.controllers.user_controllers.users_id_locations_latest_get
      parameters:
        - name: id
          in: path
          description: The `id` of the user whose latest location update is to be retreived.
          required: true
          type: string
          format: byte
      responses:
        '200':
          description: The latest location update was retreived.
          schema:
            $ref: '#/definitions/Location'
securityDefinitions:
  wheres_charlie_key:
    type: apiKey
    description: JWT-based api key authorization.
    name: Authorization
    in: header
definitions:
  Location:
    type: object
    required:
      - location_string
    properties:
      location_id:
        type: string
        format: byte
      user:
        type: string
        format: byte
      location_string:
        type: string
      date_time:
        type: string
        format: date-time
      active:
        type: boolean
  User:
    type: object
    required:
      - name
    properties:
      user_id:
        type: string
        format: byte
      name:
        type: string
      active:
        type: boolean
      roles:
        type: array
        items:
          type: string
          enum:
            - admin
            - 'user:post'
            - 'user:profile'
  AccessToken:
    type: object
    required:
      - access_token
    properties:
      access_token:
        type: string
  ArrayOfLocations:
    type: array
    items:
      $ref: '#/definitions/Location'
  ArrayOfUsers:
    type: array
    items:
      $ref: '#/definitions/User'
